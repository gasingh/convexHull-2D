<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Archive name="Root">
  <!--Grasshopper archive-->
  <!--Grasshopper and GH_IO.dll are copyrighted by Robert McNeel & Associates-->
  <!--Archive generated by GH_IO.dll file utility library {0.2.0002}-->
  <items count="1">
    <item name="ArchiveVersion" type_name="gh_version" type_code="80">
      <Major>0</Major>
      <Minor>2</Minor>
      <Revision>2</Revision>
    </item>
  </items>
  <chunks count="2">
    <chunk name="Definition">
      <items count="1">
        <item name="plugin_version" type_name="gh_version" type_code="80">
          <Major>1</Major>
          <Minor>0</Minor>
          <Revision>7</Revision>
        </item>
      </items>
      <chunks count="5">
        <chunk name="DocumentHeader">
          <items count="5">
            <item name="DocumentID" type_name="gh_guid" type_code="9">d0aece65-fe54-42a2-af78-ef04390a4b9a</item>
            <item name="Preview" type_name="gh_string" type_code="10">Shaded</item>
            <item name="PreviewMeshType" type_name="gh_int32" type_code="3">1</item>
            <item name="PreviewNormal" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;150;0;0</ARGB>
            </item>
            <item name="PreviewSelected" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;0;150;0</ARGB>
            </item>
          </items>
        </chunk>
        <chunk name="DefinitionProperties">
          <items count="3">
            <item name="Date" type_name="gh_date" type_code="8">638086362980906796</item>
            <item name="Description" type_name="gh_string" type_code="10"></item>
            <item name="Name" type_name="gh_string" type_code="10">convexHull_2D.ghx</item>
          </items>
          <chunks count="3">
            <chunk name="Revisions">
              <items count="1">
                <item name="RevisionCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
            <chunk name="Projection">
              <items count="2">
                <item name="Target" type_name="gh_drawing_point" type_code="30">
                  <X>-74</X>
                  <Y>27</Y>
                </item>
                <item name="Zoom" type_name="gh_single" type_code="5">1</item>
              </items>
            </chunk>
            <chunk name="Views">
              <items count="1">
                <item name="ViewCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
          </chunks>
        </chunk>
        <chunk name="RcpLayout">
          <items count="1">
            <item name="GroupCount" type_name="gh_int32" type_code="3">0</item>
          </items>
        </chunk>
        <chunk name="GHALibraries">
          <items count="1">
            <item name="Count" type_name="gh_int32" type_code="3">1</item>
          </items>
          <chunks count="1">
            <chunk name="Library" index="0">
              <items count="6">
                <item name="AssemblyFullName" type_name="gh_string" type_code="10">GhPython, Version=6.30.20288.16411, Culture=neutral, PublicKeyToken=null</item>
                <item name="AssemblyVersion" type_name="gh_string" type_code="10">6.30.20288.16411</item>
                <item name="Author" type_name="gh_string" type_code="10"></item>
                <item name="Id" type_name="gh_guid" type_code="9">00000000-0000-0000-0000-000000000000</item>
                <item name="Name" type_name="gh_string" type_code="10"></item>
                <item name="Version" type_name="gh_string" type_code="10"></item>
              </items>
            </chunk>
          </chunks>
        </chunk>
        <chunk name="DefinitionObjects">
          <items count="1">
            <item name="ObjectCount" type_name="gh_int32" type_code="3">3</item>
          </items>
          <chunks count="3">
            <chunk name="Object" index="0">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">00000000-0000-0000-0000-000000000000</item>
                <item name="Name" type_name="gh_string" type_code="10">GhPython Script</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="11">
                    <item name="CodeInput" type_name="gh_string" type_code="10">import rhinoscriptsyntax as rs
import Rhino
import Rhino.Geometry as rg

def simpleGrahamScanSorting(ptList):
    """
    
    ---------------------------------------------------------
    "The first step of a Graham-Scan sorts the points
     by their polar angle from the bottom-left vertex, p0"
    
    (http://slideplayer.com/slide/3287751/)
    ---------------------------------------------------------
    
    """
    
    #print len(a_ok)
    
    
    # get the least X and least Y value
    # find the bottom-left vertex as p0
    #leastXY_pt = ptList[0]
    leastY_pt_index = 0
    leastY_pt = ptList[leastY_pt_index]
    for i in range(1,len(ptList),1):
        print i, " | ", ptList[i].X , " | ", ptList[i].Y
        #if (ptList[i].X &lt; leastXY_pt.X and ptList[i].Y &lt; leastXY_pt.Y):
        #    leastXY_pt = ptList[i]
        if (ptList[i].Y &lt; leastY_pt.Y):
            leastY_pt = ptList[i]
            leastY_pt_index = i
        else:
            pass
    print "+++++++++++++++++++++++++++++++++"
    print leastY_pt , " | ", leastY_pt_index
    print "+++++++++++++++++++++++++++++++++"
    
    
    
    # compute polar Angles
    # define base vector to compute against
    
    vecX = Rhino.Geometry.Point3d(leastY_pt.X+1,leastY_pt.Y,leastY_pt.Z)- leastY_pt
    print type(vecX)
    
    vecList = []
    angList = []
    vecList.append(vecX)
    print "---------------"
    for i in range(0,len(ptList),1):
        localVec = ptList[i]-leastY_pt
        vecList.append(localVec)
        angList.append(Rhino.RhinoMath.ToDegrees(Rhino.Geometry.Vector3d.VectorAngle(vecX,localVec)))
        print "i: ",i," | angle: ",angList[i], " | vector: ", localVec
    print "---------------"
    
    angListSorted = []
    for i in range(0,len(angList),1):
        angListSorted.append(angList[i])
    angListSorted.sort()
    
    ptListSorted = []
    vecListSorted = []
    for i in range(0,len(angListSorted),1):
        for j in range(0,len(angList),1):
            if (angListSorted[i]==angList[j]):
                print "found: ", j
                ptListSorted.append(ptList[j])
                vecListSorted.append(vecList[j])
            else:
                pass
                
    return [angListSorted,ptListSorted,vecListSorted,leastY_pt]

#----------------------------------------------------------------
def clusterByZ_return_nestedList(ptList):
    
    print "_____________________________"
    # defaultZlist
    zList = []
    #for i,j in enumerate(ptList): zColl.append(j.Z)
    for i in range(0,len(ptList),1):
        zList.append(ptList[i].Z)
        
    print zList
    
    # find Unique Z values
    uniqZList = []
    uniqZList.append(zList[0])
    for i in range(1,len(zList),1):
        foundCount = 0
        for j in range(0,len(uniqZList),1):
            if zList[i] == uniqZList[j]:
                foundCount = foundCount+1
        if foundCount == 0:
            uniqZList.append(zList[i])
    #print uniqZList, " uniqZList"
    print "-----------"
    for i,j in enumerate(uniqZList): print i," : ", j," : ",type(j)
    print "-----------"
    
    # sort the uniqueList tp avaoid further data ambiguities
    uniqZList.sort()
    
    # prepare agglomerations based on found clusters
    ptCluster = []  # this is a nestedList per cluster (here the clustering is as per Z logic)
    for i in range(0,len(uniqZList),1):
        uniqCluster = []
        for j in range(0,len(zList),1):
            if uniqZList[i] == zList[j]:
                uniqCluster.append(ptList[j])
                
        print len(uniqCluster), " uniqCluster"
        ptCluster.append(uniqCluster)
        #for k in range(0,len(uniqCluster),1):
        #    ptCluster.append(uniqCluster[k])
    
    print len(ptCluster), type(ptCluster[0][0])
    print "_____________________________"
    return ptCluster

def clusterByY_return_nestedList(ptList):
    
    print "_____________________________"
    # defaultZlist
    zList = []
    #for i,j in enumerate(ptList): zColl.append(j.Z)
    for i in range(0,len(ptList),1):
        #zList.append(ptList[i].Z)
        zList.append(ptList[i].Y)           # modeified this to work as a Y cluster
        
    print zList
    
    # find Unique Z values
    uniqZList = []
    uniqZList.append(zList[0])
    for i in range(1,len(zList),1):
        foundCount = 0
        for j in range(0,len(uniqZList),1):
            if zList[i] == uniqZList[j]:
                foundCount = foundCount+1
        if foundCount == 0:
            uniqZList.append(zList[i])
    #print uniqZList, " uniqZList"
    print "-----------"
    for i,j in enumerate(uniqZList): print i," : ", j," : ",type(j)
    print "-----------"
    
    # sort the uniqueList tp avaoid further data ambiguities
    uniqZList.sort()
    
    # prepare agglomerations based on found clusters
    ptCluster = []  # this is a nestedList per cluster (here the clustering is as per Z logic)
    for i in range(0,len(uniqZList),1):
        uniqCluster = []
        for j in range(0,len(zList),1):
            if uniqZList[i] == zList[j]:
                uniqCluster.append(ptList[j])
                
        print len(uniqCluster), " uniqCluster"
        ptCluster.append(uniqCluster)
        #for k in range(0,len(uniqCluster),1):
        #    ptCluster.append(uniqCluster[k])
    
    print len(ptCluster), type(ptCluster[0][0])
    print "_____________________________"
    return ptCluster

def clusterByX_return_nestedList(ptList):
    
    print "_____________________________"
    # defaultZlist
    zList = []
    #for i,j in enumerate(ptList): zColl.append(j.Z)
    for i in range(0,len(ptList),1):
        #zList.append(ptList[i].Z)
        zList.append(ptList[i].X)           # modeified this to work as a X cluster
        
    print zList
    
    # find Unique Z values
    uniqZList = []
    uniqZList.append(zList[0])
    for i in range(1,len(zList),1):
        foundCount = 0
        for j in range(0,len(uniqZList),1):
            if zList[i] == uniqZList[j]:
                foundCount = foundCount+1
        if foundCount == 0:
            uniqZList.append(zList[i])
    #print uniqZList, " uniqZList"
    print "-----------"
    for i,j in enumerate(uniqZList): print i," : ", j," : ",type(j)
    print "-----------"
    
    # sort the uniqueList tp avaoid further data ambiguities
    uniqZList.sort()
    
    # prepare agglomerations based on found clusters
    ptCluster = []  # this is a nestedList per cluster (here the clustering is as per Z logic)
    for i in range(0,len(uniqZList),1):
        uniqCluster = []
        for j in range(0,len(zList),1):
            if uniqZList[i] == zList[j]:
                uniqCluster.append(ptList[j])
                
        print len(uniqCluster), " uniqCluster"
        ptCluster.append(uniqCluster)
        #for k in range(0,len(uniqCluster),1):
        #    ptCluster.append(uniqCluster[k])
    
    print len(ptCluster), type(ptCluster[0][0])
    print "_____________________________"
    return ptCluster

def getLeastXYPt(arrPt):
    
    if arrPt:
        #find pt with least X,Y
        
        ptList = rs.coerce3dpointlist(arrPt)
        
        for i,j in enumerate(ptList): print i, type(j)
        
        #print len(a_ok)
        
        """
        #VERSION 1-
        # get the least X and least Y value
        # find the bottom-left vertex as p0
        #leastXY_pt = ptList[0]
        leastY_pt_index = 0
        leastY_pt = ptList[leastY_pt_index]
        for i in range(1,len(ptList),1):
            print i, " | ", ptList[i].X , " | ", ptList[i].Y
            #if (ptList[i].X &lt; leastXY_pt.X and ptList[i].Y &lt; leastXY_pt.Y):
            #    leastXY_pt = ptList[i]
            if (ptList[i].Y &lt; leastY_pt.Y):
                leastY_pt = ptList[i]
                leastY_pt_index = i
            else:
                pass
        print "+++++++++++++++++++++++++++++++++"
        print leastY_pt , " | ", leastY_pt_index
        print "+++++++++++++++++++++++++++++++++"
        """
        
        
        # VERSION 2-
        # AIM: to find the bottom-left vertex as p0
        
        # THIS VERSION favours the Y first &amp; then the X axis,... 
        
        leastY_ptList = []
        leastY_ptIndexList = []
        yList = []
        
        leastYList = clusterByY_return_nestedList(ptList)[0]
        print "=================== Y Clusters"
        for i,j in enumerate(leastYList): print i," | ",j," | ",type(j)
        print "=================== =========="
        
        leastXList = clusterByX_return_nestedList(leastYList)[0]
        print "=================== X Clusters"
        for i,j in enumerate(leastXList): print i," | ",j," | ",type(j)
        print "=================== =========="
        
        leastXY_pt = leastXList[0]
        leastXY_pt_index = None
        
        for i in range(0,len(ptList),1):
            if ptList[i].X == leastXY_pt.X:
                if ptList[i].Y == leastXY_pt.Y:
                    if ptList[i].Z == leastXY_pt.Z:
                        leastXY_pt_index = i
        
        # loop through the main list and fetch the index
        
        print "+++++++++++++++++++++++++++++++++"
        print leastXY_pt , " | ", leastXY_pt_index
        print "+++++++++++++++++++++++++++++++++"
        return [leastXY_pt,leastXY_pt_index]

def simpleGrahamScanSorting_v2(ptList):

    """
    
    This one takes care of edgeCases,..
    so parallel points with the same Y but different X will be segregated so as to 
    find the least pt in the LHS ie. least X,..
    So two levels of filtering now exist.
    # 10:32 21/09/2016
    # 14:30 21/09/2016 - Uses getLeastXYPt
    
    
    ---------------------------------------------------------
    "The first step of a Graham-Scan sorts the points
     by their polar angle from the bottom-left vertex, p0"
    
    (http://slideplayer.com/slide/3287751/)
    ---------------------------------------------------------
    
    """
    
    #print len(a_ok)
    
    """ ABANDONED &amp; REPLACED BELOW
    # get the least X and least Y value
    # find the bottom-left vertex as p0
    #leastXY_pt = ptList[0]
    leastY_pt_index = 0
    leastY_pt = ptList[leastY_pt_index]
    for i in range(1,len(ptList),1):
        print i, " | ", ptList[i].X , " | ", ptList[i].Y
        #if (ptList[i].X &lt; leastXY_pt.X and ptList[i].Y &lt; leastXY_pt.Y):
        #    leastXY_pt = ptList[i]
        if (ptList[i].Y &lt; leastY_pt.Y):
            leastY_pt = ptList[i]
            leastY_pt_index = i
        else:
            pass
    print "+++++++++++++++++++++++++++++++++"
    print leastY_pt , " | ", leastY_pt_index
    print "+++++++++++++++++++++++++++++++++"
    """
    
    arrPt = ptList
    
    data = getLeastXYPt(arrPt)
    leastXYPt = data[0]
    leastXYPt_index = data[1]
    print "+++++++++++++++++++++++++++++++++"
    print leastXYPt , " | ", leastXYPt_index
    print "+++++++++++++++++++++++++++++++++"
    
    
    
    # compute polar Angles
    # define base vector to compute against
    
    vecX = Rhino.Geometry.Point3d(leastXYPt.X+1,leastXYPt.Y,leastXYPt.Z)- leastXYPt
    print type(vecX)
    
    vecList = []
    angList = []
    vecList.append(vecX)
    print "---------------"
    for i in range(0,len(ptList),1):
        localVec = ptList[i]-leastXYPt
        vecList.append(localVec)
        angList.append(Rhino.RhinoMath.ToDegrees(Rhino.Geometry.Vector3d.VectorAngle(vecX,localVec)))
        print "i: ",i," | angle: ",angList[i], " | vector: ", localVec
    print "---------------"
    
    #angList.sort()
    angListSorted = []
    for i in range(0,len(angList),1):
        angListSorted.append(angList[i])
    angListSorted.sort()
    #######print angListSorted
    
    ptListSorted = []
    vecListSorted = []
    for i in range(0,len(angListSorted),1):
        for j in range(0,len(angList),1):
            if (angListSorted[i]==angList[j]):
                print "found: ", j
                ptListSorted.append(ptList[j])
                vecListSorted.append(vecList[j])
            else:
                pass
    
    return [angListSorted,ptListSorted,vecListSorted,leastXYPt]

    
    # 18:10 20/09/2016
    # 14:40 21/09/2016
    
    if inputBox:
        
        if rs.IsBrep(inputBox):
            print "yes brep"
        if rs.IsPolysurface(inputBox):
            print "yes polySrf"
        inputBoxBrp = rs.coercebrep(inputBox)
        print type(inputBoxBrp)
        brp_v = inputBoxBrp.Vertices
        print type(brp_v), " brp_v"
        
        
        brep_v_genericList = []
        
        for i in range(0,brp_v.Count,1):
            print i
            print brp_v.Item           # ERROR: 'Message: indexer# is not callable'
            print brp_v.ElementAt(i)    # ERROR: 'Message: 'BrepVertexList' object has no attribute 'ElementAt'
            print (brp_v.ElementAt(i).GetType().ToString())
            brep_v_genericList.append(brp_v.ElementAt(i))
            
        
        brep_v_List = brp_v.ToList()
        print len(brep_v_List)
        brep_v_Array = brp_v.ToArray()  
        print len(brep_v_Array)
        
        print type(brep_v_List), "brp_v_List"
        print type(brep_v_Array), "brp_v_Array"
        
        
        brep_v_genericList = inputBoxBrp.DuplicateVertices()
        #for i,j in enumerate(brep_v_genericList): rs.AddPoint(j)           # OK
        
        
        nestedPointCluster_nestedList = clusterByZ_return_nestedList(brep_v_genericList)
        print len(nestedPointCluster_nestedList[1])
        for i,j in enumerate(nestedPointCluster_nestedList[1]): print i,type(j)
        
        print ".........."
        lowestPtSet = nestedPointCluster_nestedList[0]
        print len(nestedPointCluster_nestedList[0]),len(lowestPtSet)
        highestPtSet = nestedPointCluster_nestedList[1]
        print len(nestedPointCluster_nestedList[1]),len(highestPtSet)
        print ".........."
        
        """
        # PRINT THE INITIAL HEIGHT BASED unordered point SEQUENCES:
        for i in range(0,len(lowestPtSet),1):
            print i,": ",type(lowestPtSet[i])
            ptLocal = lowestPtSet[i]
            rs.AddPoint(ptLocal)
            rs.AddTextDot("L:"+str(i),ptLocal)
        
        for i in range(0,len(highestPtSet),1):
            print i,": ",type(highestPtSet[i])
            ptLocal = highestPtSet[i]
            rs.AddPoint(ptLocal)
            rs.AddTextDot("H:"+str(i),ptLocal)
        """
        
        ####dataOutLow= simpleGrahamScanSorting(lowestPtSet)
        dataOutLow= simpleGrahamScanSorting_v2(lowestPtSet)
        anglesSortedList_L    = dataOutLow[0]
        pointsSortedList_L    = dataOutLow[1]
        vectorsSortedList_L   = dataOutLow[2]
        print len(dataOutLow), "sorted Low pts"
        
        
        dataOutHigh = simpleGrahamScanSorting_v2(highestPtSet)
        ####dataOutHigh = simpleGrahamScanSorting(highestPtSet)
        anglesSortedList_H    = dataOutHigh[0]
        pointsSortedList_H    = dataOutHigh[1]
        vectorsSortedList_H   = dataOutHigh[2]
        print len(dataOutHigh), "sorted High pts"
        
        
        
        
        """
        # PRINT THE final HEIGHT BASED ORDERED point SEQUENCES:
        for i in range(0,len(pointsSortedList_L),1):
            print i,": ",type(pointsSortedList_L[i])
            ptToLabel = pointsSortedList_L[i]
            rs.AddTextDot("L:"+str(i),ptToLabel)
        
        for kk in range(0,len(pointsSortedList_H),1):
            print kk,": ",type(pointsSortedList_H[kk])
            ptToLabel = pointsSortedList_H[kk]
            rs.AddTextDot("H:"+str(kk),ptToLabel)
        """
        
        
        
        
        
        
        
        if pointsSortedList_H:
            for i,j in enumerate(pointsSortedList_H): print i,j
        
        
        
        
        
        
        finalbbList = []
        finalbbList.extend(pointsSortedList_L)
        finalbbList.extend(pointsSortedList_H)
        
        
        print len(finalbbList), " finalbbList"
        
        ###############for i in range(0,len(finalbbList),1):
        ###############    print finalbbList[i]
        ###############    rs.AddTextDot(i,finalbbList[i])
        
            
        
        ###############pointsSortedList_L.append(pointsSortedList_L[0])
        ###############polyLn_Low = rs.AddPolyline(pointsSortedList_L)
        ###############rs.SelectObject(polyLn_Low)
        return finalbbList

#_,a,_,_ = simpleGrahamScanSorting(x)
#print(a)

_,a,_,_ = simpleGrahamScanSorting_v2(x)</item>
                    <item name="Description" type_name="gh_string" type_code="10">GhPython provides a Python script component</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>52</X>
                      <Y>52</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>558</W>
                      <H>571</H>
                    </item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">false</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">327a299e-9b02-4b8c-a38d-dc27684060b9</item>
                    <item name="IsAdvancedMode" type_name="gh_bool" type_code="1">false</item>
                    <item name="MarshalOutGuids" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">GhPython Script</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Python</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="3">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>325</X>
                          <Y>158</Y>
                          <W>72</W>
                          <H>60</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>354</X>
                          <Y>188</Y>
                        </item>
                        <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="6">
                        <item name="InputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="4">
                        <chunk name="InputParam" index="0">
                          <items count="12">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">The x script variable</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">d2579ed6-baa9-42f4-ad81-80adf5e30fb9</item>
                            <item name="Name" type_name="gh_string" type_code="10">x</item>
                            <item name="NickName" type_name="gh_string" type_code="10">x</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">8dae5eca-485a-427e-b03b-d1374eb64303</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">e1937b56-b1da-4c12-8bd8-e34ee81746ef</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="3">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>327</X>
                                  <Y>160</Y>
                                  <W>12</W>
                                  <H>28</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>334.5</X>
                                  <Y>174</Y>
                                </item>
                                <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script input y.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">7fdac83a-5ca1-4446-9c98-cc83e91d2f2a</item>
                            <item name="Name" type_name="gh_string" type_code="10">y</item>
                            <item name="NickName" type_name="gh_string" type_code="10">y</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="3">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>327</X>
                                  <Y>188</Y>
                                  <W>12</W>
                                  <H>28</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>334.5</X>
                                  <Y>202</Y>
                                </item>
                                <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">The execution information, as output and error streams</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">3695ed3f-082b-454e-ab9b-ab7192b681df</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">out</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="3">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>369</X>
                                  <Y>160</Y>
                                  <W>26</W>
                                  <H>28</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>382</X>
                                  <Y>174</Y>
                                </item>
                                <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Script output a.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">22eb795b-a58e-4ae4-8326-fa740c28fd4b</item>
                            <item name="Name" type_name="gh_string" type_code="10">a</item>
                            <item name="NickName" type_name="gh_string" type_code="10">a</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="3">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>369</X>
                                  <Y>188</Y>
                                  <W>26</W>
                                  <H>28</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>382</X>
                                  <Y>202</Y>
                                </item>
                                <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="1">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">fbac3e32-f100-4292-8692-77240a42fd1a</item>
                <item name="Name" type_name="gh_string" type_code="10">Point</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of three-dimensional points</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">8dae5eca-485a-427e-b03b-d1374eb64303</item>
                    <item name="Name" type_name="gh_string" type_code="10">Point</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Pt</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>158</X>
                          <Y>164</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>183</X>
                          <Y>174</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">10</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="10">
                            <chunk name="Item" index="0">
                              <!--GH_Point only stores data which exists, test the existence of data fields prior to reading.-->
                              <items count="1">
                                <item name="Coordinate" type_name="gh_point3d" type_code="51">
                                  <X>11.6283928660132</X>
                                  <Y>-10.412832213674</Y>
                                  <Z>0</Z>
                                </item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="1">
                              <!--GH_Point only stores data which exists, test the existence of data fields prior to reading.-->
                              <items count="1">
                                <item name="Coordinate" type_name="gh_point3d" type_code="51">
                                  <X>-9.22391070458678</X>
                                  <Y>20.1227816272279</Y>
                                  <Z>0</Z>
                                </item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="2">
                              <!--GH_Point only stores data which exists, test the existence of data fields prior to reading.-->
                              <items count="1">
                                <item name="Coordinate" type_name="gh_point3d" type_code="51">
                                  <X>-13.3262344352227</X>
                                  <Y>5.56116034911201</Y>
                                  <Z>0</Z>
                                </item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="3">
                              <!--GH_Point only stores data which exists, test the existence of data fields prior to reading.-->
                              <items count="1">
                                <item name="Coordinate" type_name="gh_point3d" type_code="51">
                                  <X>-2.10406631131157</X>
                                  <Y>11.3571222938757</Y>
                                  <Z>0</Z>
                                </item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="4">
                              <!--GH_Point only stores data which exists, test the existence of data fields prior to reading.-->
                              <items count="1">
                                <item name="Coordinate" type_name="gh_point3d" type_code="51">
                                  <X>8.74728321638161</X>
                                  <Y>0</Y>
                                  <Z>0</Z>
                                </item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="5">
                              <!--GH_Point only stores data which exists, test the existence of data fields prior to reading.-->
                              <items count="1">
                                <item name="Coordinate" type_name="gh_point3d" type_code="51">
                                  <X>-10.283968105746</X>
                                  <Y>0</Y>
                                  <Z>0</Z>
                                </item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="6">
                              <!--GH_Point only stores data which exists, test the existence of data fields prior to reading.-->
                              <items count="1">
                                <item name="Coordinate" type_name="gh_point3d" type_code="51">
                                  <X>-5.79211996760404</X>
                                  <Y>-8.21535383160165</Y>
                                  <Z>0</Z>
                                </item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="7">
                              <!--GH_Point only stores data which exists, test the existence of data fields prior to reading.-->
                              <items count="1">
                                <item name="Coordinate" type_name="gh_point3d" type_code="51">
                                  <X>5.67856114693786</X>
                                  <Y>11.6291205914637</Y>
                                  <Z>0</Z>
                                </item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="8">
                              <!--GH_Point only stores data which exists, test the existence of data fields prior to reading.-->
                              <items count="1">
                                <item name="Coordinate" type_name="gh_point3d" type_code="51">
                                  <X>7.43080641578514</X>
                                  <Y>-13.9011176877038</Y>
                                  <Z>0</Z>
                                </item>
                              </items>
                            </chunk>
                            <chunk name="Item" index="9">
                              <!--GH_Point only stores data which exists, test the existence of data fields prior to reading.-->
                              <items count="1">
                                <item name="Coordinate" type_name="gh_point3d" type_code="51">
                                  <X>12.3046236953805</X>
                                  <Y>4.45199193919926</Y>
                                  <Z>0</Z>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="2">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">71b5b089-500a-4ea6-81c5-2f960441a0e8</item>
                <item name="Name" type_name="gh_string" type_code="10">PolyLine</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="4">
                    <item name="Description" type_name="gh_string" type_code="10">Create a polyline connecting a number of points.</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">e792351d-c76c-495e-9c77-3855628a12e6</item>
                    <item name="Name" type_name="gh_string" type_code="10">PolyLine</item>
                    <item name="NickName" type_name="gh_string" type_code="10">PLine</item>
                  </items>
                  <chunks count="4">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>428</X>
                          <Y>259</Y>
                          <W>67</W>
                          <H>49</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>459</X>
                          <Y>284</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="param_input" index="0">
                      <items count="8">
                        <item name="Access" type_name="gh_int32" type_code="3">1</item>
                        <item name="Description" type_name="gh_string" type_code="10">Polyline vertex points</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">4bc3de79-a3a2-472c-b7d3-f5b92b666b4f</item>
                        <item name="Name" type_name="gh_string" type_code="10">Vertices</item>
                        <item name="NickName" type_name="gh_string" type_code="10">V</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="Source" index="0" type_name="gh_guid" type_code="9">22eb795b-a58e-4ae4-8326-fa740c28fd4b</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>430</X>
                              <Y>261</Y>
                              <W>14</W>
                              <H>22</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>438.5</X>
                              <Y>272.25</Y>
                            </item>
                          </items>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_input" index="1">
                      <items count="6">
                        <item name="Description" type_name="gh_string" type_code="10">Close polyline</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">07ab7485-d383-4589-a086-0282ecc8ce28</item>
                        <item name="Name" type_name="gh_string" type_code="10">Closed</item>
                        <item name="NickName" type_name="gh_string" type_code="10">C</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                      </items>
                      <chunks count="2">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>430</X>
                              <Y>283</Y>
                              <W>14</W>
                              <H>23</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>438.5</X>
                              <Y>294.75</Y>
                            </item>
                          </items>
                        </chunk>
                        <chunk name="PersistentData">
                          <items count="1">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Branch" index="0">
                              <items count="2">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Item" index="0">
                                  <items count="1">
                                    <item name="boolean" type_name="gh_bool" type_code="1">true</item>
                                  </items>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_output" index="0">
                      <items count="6">
                        <item name="Description" type_name="gh_string" type_code="10">Resulting polyline</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">cb12b3f0-d356-4326-94d9-c7c9dc7ddbc4</item>
                        <item name="Name" type_name="gh_string" type_code="10">Polyline</item>
                        <item name="NickName" type_name="gh_string" type_code="10">Pl</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>474</X>
                              <Y>261</Y>
                              <W>19</W>
                              <H>45</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>483.5</X>
                              <Y>283.5</Y>
                            </item>
                          </items>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
          </chunks>
        </chunk>
      </chunks>
    </chunk>
    <chunk name="Thumbnail">
      <items count="1">
        <item name="Thumbnail" type_name="gh_drawing_bitmap" type_code="37">
          <bitmap length="2327">iVBORw0KGgoAAAANSUhEUgAAAJYAAABkCAIAAADrOV6nAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAisSURBVHhe7ZvpU1vXFcD9J7QfmumXJpNOM5NxvbS2WY1rtoBNWlMTapvFLrVx22njkgnEBhtTUnYMmAAFsdhgE+wCxpgdISQEEiAhofVJaLV2vSck1iRN2g+lB/FcJ9NkppDpjK50f3PmzeXp3jtv+HHuufcB+zD+wBYGWV4qtGEQBCtEHqwQebBC5MEKkQcrRB6sEHmwQuTBCpEHK0QerBB5fFeh0+H8X7Db7fSAQGXvCuF7903QPb4FMIlKvaRQqgiVWq1VExpC5Q21dklBqF6GkjCZzI7AtrhHhQ6HQ6/X67xA4z9twGAwwKd0vz1BkZRQJphQPpk3jk+pn7X1M1oet9R31jc/YnRN3Js1jPD1w9sBDcMwUzhks4LCwLW4a4VWq3V5eZkgCLFYrPAik0rlcgWhVMq9iEQitVrt8XhA5PZi6CBfBLUTpMNFhx1i+UW4KW+QNvem+3Pu4uTIeqFgq/KZ6/bNj3JL28o6OPeLmkpLOq9PbxXPblXytipm/lUO7T5Jk8O6bLPSjxeA7FohRVFCobC+vn7Dy+df/F3A5tQ1MPTPLZ99+gncAXl1dXX82RmdYUmlkRNaGaGVKLWLCp1IoRPKdQKZbk6m40v1PKl+WmLgLho4YgNbbGSJjEyRcXzRMj4tGShqyG8g44pUoXeMseFpIaEZoR88yjqcdPR8SVSNJeLmXGihODSHfaztnzGFfZcGnozDTxX9fIHHrhWurKz09fUVFBTAggnZpjfopsYnnzzp483O63TapaUlWEvz8/Pvd7RKlAK+iD0jZk4vjnIlgxxpP1vay5L9bUL2MVPWMaa4N6poGVE2DinrB4m7z1R3+tXlT9Ulg6aS2qFr797ObF0+k8sNrtDGRVwMC/91ePbDP4WmRpwvjqpQR2QNBl3rO5I7E37vH/H53WlVZXXwVPTzBR67VgjACtnT08Nisbhc7tTUFI/Hm53lQxuYnp5mMpm9vb0kSUI3h/3L4fyvIL8czu2gIFbIjc6hlipzZOtnb93RxYZcOHb0QtDNnpyQlPDEW8ebN2IZq3FNK3GNnrjGjciKsd+p5QbSSdIPF3jsRSFs5c1ms9fc18Dn86FeQh+69+7xUGusxcEKY0TjanS5OvJI8uGzt36Z33v9J0nHEm4E/3Ulqt4VXUdtR+1yeIvwhtOygmvh7hQCkGCubwY+pfvtiRVqnSUZLNGFNqxElihPHDiz/+ytxD80Xt3/9qG47J/We07WUZF37SchqshghiDHZV3DCnet8P8HnAhddg+jt6ZoKajGdrxQGvZmwhtBqUEfdL0XlBIWlXWg2nq8TBdeYztRbT1RTYUU9F9QinUr1CaswLBfpmcJJHxOodvtnpqYycxLrTQezxo5mCcI/lH86zHvxvzm7sWTmdExOQeuTx682P7jWupEpSm8mgrOeZh07c/pTHut1iKHk0kAWvQ5hVBEn2stf2m6UaA8fFt89Jbo2OtvvZbdmQUL6fdDfhD2+zdKdUGFiqAKU2i5MbTCfjTn48S+we5RU3WH+o8ai9Rpd9ETBQw+pxC2QhvuT4eEj3IUr95xHb4hfvOViO++GvPagXf2f+fI9w5lvFJJHSq1HioyHix6frDA/MOyqfQ15xcexyej2oYRzUeU3UNPFDD4nEJgmXTzZVP5Y2eKppI+nDybVhL3i/cif/7+zxLfj/lt4+ni6aQP2Wd3ooD19v2pctBGOTxiI+upqhQOJ/QsAYMvKrTarE4HaTVSZr3TbHCSJOVyUS5q++qwUybvTTr0pNPmstttlN29YGAOErXeTU1g4YsKd4Ct6VffDHx92L0vuCmHe1rTO6l+SDkC7k2b7yrcFZB8Y4q2BR0LK0QSu81htj4fkjRpTAonroUoAimoMkpHJe2wm91ZVwMKf1BIOqjFJR5X1g+bIPpWIOEXWeighEqOQMmBBny5/RsS2Oh4oShq+QXQ3rkJ7PTZGY46/qGQXFDwhIoZ0kmBGLVaLRAIRCKRWCxms9kDAwP9/f1wZbFYcHPBC3QgCMI/LPqHQqdKo+DOj5stZo/bMzs7Czm3sbkBB8murq7Ozs7Hjx/D9cGDB+Bsc3NzfX19dXUVutHjEccfFAKwNookkHr8nt5uBqPZZNA87e9XqjU52dlpaWkTExN5eXlXr17VarUkScKuB+DxeDCKHo8y/qMQCpzFYmlta62urrFbTWOj4xqdMTPzSlRUVHd395UrV8796hyssU6n02Qy6fV6Pp/vcrnAJT0FsviJwh1ADzA8PAzZBjo1Gs2lS5cSExOhFmZkZJw7f36Oy2luaOXzRXD0YDAYUCnBIj0YWfxKIaSUx+OZn59XKgmDwaAiiNTU1ISEhNzc3PT09KTkdzhj4+2MDjaLZ7VZq6qqWltboSjSg5HFrxRCnYNdaHNzs0IuGR4dES9Kk5KSQF5xcTFUxFOnTsGOFJZQJRgmCFhdjUajH5RDv1K4trYG287S0jLh/MyDrkeLEunp06dLSkra29vDwsLi4+MFQoFKpZLL5ZJFCZfLBeX0SJTxK4VwZoAk6+jokMtls3zegkgcHR2dnJwMC2lsbCxYnJubA4UymUwikTCZTHwu9DmgFrrdbkivoaEhNofDYbMvX74cEhISHBwcERGRkpIC2uCAD9eRkRG44iz0RSCxoMIJhcKFhQWofLBmQs7tAG2olDtvZ6DDt//3HR/B3xQCIIZ6gffPWl9C3/XiH/4AP1QYaGCFyIMVIg9WiDxYIfJghciDFSIPVog8WCHyYIXIgxUiD1aIPFgh8mCFyIMVIg9WiDxYIfJghciDFSIPVog8WCHyYIXIgxUiD1aIPFgh8mCFyIMVIg9WiDxYIfJghciDFSIPVog8WCHyYIXIgxUiD1aIPFgh8mCFyIMVIg9WiDxYIfJghciDFSIPVog8WCHyYIXIgxUiD1aIPFgh8mCFyIMVIg9WiDxfUYhBFFohBmH27fs3rZf+NCO4JbYAAAAASUVORK5CYII=</bitmap>
        </item>
      </items>
    </chunk>
  </chunks>
</Archive>